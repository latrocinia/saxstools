#! env/bin/python
from __future__ import print_function, division, absolute_import
from argparse import ArgumentParser
from time import time
from os.path import join

from numpy import linspace
from scipy.interpolate import interp1d

from disvis import PDB
from disvis.rotations import proportional_orientations, quat_to_rotmat
from disvis.helpers import mkdir_p

from saxstools.fullsaxs import FullSAXS
from saxstools.helpers import parse_saxsdata

def parse_args():

    p = ArgumentParser()

    p.add_argument('receptor', type=file,
            help='PDB-file containing fixed chain.')

    p.add_argument('ligand', type=file,
            help='PDB-file containing scanning chain.')

    p.add_argument('data', type=file,
            help='File containing the SAXS data.')

    p.add_argument('-a', '--angle', dest='angle', type=float, default=15,
            help='Rotational sampling density in degrees. Default is 15 degrees.')

    p.add_argument('-vs', '--voxelspacing', dest='voxelspacing',
            type=float, default=1,
            help='Voxel spacing of search grid in angstrom. Default is 1A.')

    p.add_argument('-ir', '--interaction-radius',
            dest='interaction_radius', type=float, default=3.0,
            help='Radius of the interaction space for each atom in angstrom. '
                 'Atoms are thus considered interacting if the distance is '
                 'larger than the vdW radius and shorther than or equal to '
                 'vdW + interaction_radius. Default is 3A.')

    p.add_argument('-cv', '--max_clash',
            dest='max_clash', type=float, default=200,
            help='Maximum allowed volume of clashes. Increasing this '
                 'number results in more allowed complexes. '
                 'Default is 200 A^3.')

    p.add_argument('-iv', '--min-interaction',
            dest='min_interaction', type=float, default=300,
            help='Minimal required interaction volume for a '
                 'conformation to be considered a '
                 'complex. Increasing this number results in a '
                 'stricter counting of complexes. '
                 'Default is 300 A^3.')

    p.add_argument('-d', '--directory', dest='directory', type=str, default='.',
            help='Directory where results are written to. '
                 'Default is current directory.')

    #p.add_argument('-p', '--nproc', dest='nproc', type=int, default=1,
    #        help='Number of processors used during search.')

    p.add_argument('-g', '--gpu', dest='gpu', action='store_true',
            help='Use GPU-acceleration for search. If not available '
                 'the CPU-version will be used with the given number '
                 'of processors.')

    p.add_argument('-n', '--num', dest='num', type=int, default=51,
            help='Maximum number of data points that will be sampled. '
                 'If data contains more points, it is resampled.')

    p.add_argument('-aa', '--all-atom', dest='all_atom', action='store_true',
           help='Calculate the scattering curves using all atoms. '
                'This increases the required time with about 18.')

    p.add_argument('-bpr', '--beads-per-residue', dest='bpr', choices=[1, 2], type=int, default=2,
           help='Number of beads per residue in coarse-grained representation. '
                'With 2 beads the calculation is about 18x faster than all-atom. '
                'This increases to 60 for 1 bead per residue.')

    return p.parse_args()

def run_fullsaxs(queue, receptor, ligand, rotmat, q, Iq, sq, args):

    fs = FullSAXS()

    fs.receptor = receptor
    fs.ligand = ligand
    fs.saxsdata = (q, Iq, sq)
    fs.rotations = rotmat
    fs.coarse_grain = not args.all_atom
    fs.beads_per_residue = args.bpr

    fs.voxelspacing = args.voxelspacing
    fs.interaction_radius = args.interaction_radius
    fs.max_clash = args.max_clash
    fs.min_interaction = args.min_interaction
    fs.queue = queue

    return fs.search()

def main():
    
    args = parse_args()

    time0 = time()
    mkdir_p(args.directory)

    receptor = PDB.fromfile(args.receptor)
    ligand = PDB.fromfile(args.ligand)

    quat, weights, a = proportional_orientations(args.angle)
    rotmat = quat_to_rotmat(quat)
    print('Requested rotational sampling density: {:.2f}'.format(args.angle))
    print('Real rotational sampling density: {:.2f}'.format(a))
    print('Number of orientations sampled: {:d}'.format(quat.shape[0]))

    q, Iq, sq = parse_saxsdata(args.data)

    if q.max() > 0.75:
        print('Highest q is: {:.3f}'.format(q.max()))
        print('Truncation to 0.750')
        q = q[q <= 0.75]

    if q.size > args.num:
        print('Found {:d} sampling points. Resampling to 51 points.'.format(q.size))
        f_Iq = interp1d(q, Iq)
        f_sq = interp1d(q, sq)
        q_resampled = linspace(q.min(), q.max(), 51, endpoint=True)
        Iq = f_Iq(q_resampled)
        sq = f_sq(q_resampled)
        q = q_resampled


    queue = None
    if args.gpu:
        from disvis.helpers import get_queue
        queue = get_queue()

    solutions = run_fullsaxs(queue, receptor, ligand, rotmat, q, Iq, sq, args)

    solutions.best_lcc.tofile(join(args.directory, 'chi2.mrc'))
    #solutions.write_pdb(ligand, fbase=join(args.directory, 'fit'))

    print('Time required for search: ', time() - time0)


if __name__=='__main__':
    main()
