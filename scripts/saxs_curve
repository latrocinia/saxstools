#! /home/gydo/Github/env/bin/python
from __future__ import print_function, division
from argparse import ArgumentParser, FileType
from sys import stdout
import logging
from time import time

from numpy import linspace, float64

from saxstools.helpers import parse_pdb, parse_saxsdata, coarse_grain
from saxstools.saxs_curve import scattering_curve

def parse_args():
    p = ArgumentParser()
    p.add_argument('pdb')

    p.add_argument('-o', '--out', dest='out', type=FileType('w'), default=stdout)
    p.add_argument('-f', '--fit', dest='fit', type=FileType('r'), default=None)
    p.add_argument('-cg', '--coarse-grain', dest='cg', action='store_true')
    p.add_argument('-bpr', '--beads-per-residue', dest='bpr', type=int, 
            default=2, choices=[1, 2])
    p.add_argument('-n', '--num', dest='num', type=int, default=11)

    args = p.parse_args()

    return args

def main():
    args = parse_args()
    time0 = time()

    if args.fit is None:
        q = linspace(0.00, 0.75, args.num, endpoint=True, dtype=float64)
    else:
        q, Iq_target, sq = parse_saxsdata(args.fit)

    if args.cg:
        from disvis import PDB
        elements, coordinates = coarse_grain(PDB.fromfile(args.pdb), bpr=args.bpr)
    else:
        elements, coordinates = parse_pdb(args.pdb)

    Iq = scattering_curve(q, elements, coordinates, bpr=args.bpr)

    if args.fit is not None:
        # scale the calculated intensity values
        sf = sum(Iq*Iq_target/sq**2)/sum(Iq**2/sq**2)
        Iq *= sf
        chi2 = 1/q.size * sum(((Iq_target - Iq)/sq)**2)
        args.out.write('# Chi2: {:.4f}\n'.format(chi2))

    # write output to file
    if args.out is not None:
        args.out.write('#{:>6s} {:>18s}\n'.format('q', 'I(q)'))

    line = '{:>7.5f} {:>18.8f}\n'
    for i, j in zip(q, Iq):
        args.out.write(line.format(i, j))

    #m, s = divmod(int(round(time() - time0)), 60)
    #args.out.write('Total time: {:d}m {:d}s'.format(m, s))

if __name__=='__main__':
    main()
